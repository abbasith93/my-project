Declarative programming/lambdas/method references along with the Collections -

// Use System.out.println() insread of forEach()
Introduction to Collection -	Refer Tester1001ListCollection.java and Refer Tester1001SetCollection.java
   List - Ordered collection. Duplicates are allowed.
   Set - Unordered collection. Unique elements.

// Use System.out.println() insread of forEach()
Map - Refer Tester1001Map.java
   Map stores objects in key-value pair.
   Used in searching.

Streams - 
   Method added in Collection interface in Java 8. // Not map
   default Stream<E> stream() {
        return StreamSupport.stream(spliterator(), false);
    }
   Why stream API - for processing data

What is a stream - 
   Sequence of objects used to process collection of objects.
   Streams are not collections but they are a wrapper over collection objects.
   
The features of Java stream  –
   A stream is not a data structure. It takes input from the Collections, Arrays.
   A stream does not change the original data structure, they only provide the result as the pipelined methods.
   Once a stream is processed, can not be revisited. 
   Each intermediate operation is lazily executed and returns a stream as a result.
   Intermediate operations can be pipe lined. 
   Terminal operation mark the end of the stream and return the result.
   Streams work perfectly with lambdas.
   Streams don't store its elements.
   Streams are immutable.
   Streams are not reusable.
   Streams are easily parallelizable.
   
How to create streams - Refer Tester1002StreamCreation.java and Tester1003StreamCustomObjects.java
   Using Collection.stream()
   Using Stream.of()
   From array using Stream.of() 
   From array using Arrays.stream()
   Using Stream.empty() to create empty stream
   Using Stream.builder()
   Using Stream.iterate()
   Using Stream.generate() 
   
Points to remember - Refer Tester1004StreamPointToRemember.java
   When we create a stream from primitive array using Stream.of(primitive_array), we create a stream of one element.
	
https://www.geeksforgeeks.org/stream-in-java/
https://www.baeldung.com/java-8-streams
https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html  
 