Converting stream to Map -
1) collect(Collectors.toMap(Function keyValue, Function valueValue))
         -  Convert stream into map having the result of provided Functional interfaces as key and value.
            Works only for unique keys
2) collect(Collectors.toMap(Function keyValue, Function valueValue, BinaryOperator mergeFunction)
         -  Convert stream into map having the result of provided Functional interfaces as key and value.
            If the keys are duplicate,  the merge function will be applied to avoid collision.
            BinaryOperator is a function interface having apply method (takes two arguments and return a value)
            inherited from BiFunction interface. This apply method decides which value to keep when there is 
            a collision.
3) collect(Collectors.toMap(Function keyValue, Function valueValue, BinaryOperator mergeFunction, Supplier mapSuppiler)
		 -  Convert stream into map having the result of provided Functional interfaces as key and value.
            If the keys are duplicate,  the merge function will be applied to avoid collision.
            BinaryOperator is a function interface having apply method (takes two arguments and return a value)
            inherited from BiFunction interface. This apply method decides which value to keep when there is 
            a collision.
            The mapSuppler function is a Supplier object which has get method which returns a object. This object is
            a new Map object where the result is stored. By default, toMap function returns HashMap but by using
            mapSuppler function, we can store the result in other type of Maps.  